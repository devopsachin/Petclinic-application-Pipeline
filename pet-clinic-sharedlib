@Library('pet-clinic') _

pipeline{
 agent any
    environment{ 
    def props = readJSON file: 'resources/pet-clinic.json'
    applicationName = "${props.applicationName}"
    applicationPath = "${props.commonUrl}"
    dockerPath = "${props.dockerFilePath}"
    dockerRepo = "${props.dockerRepoName}"
    applicationPort = "${props.port}"
    username = "${props.serveruserName}"
    ipAdr = "${props.serveripAddress}"
    branch = "${props.gitBranch}"
    gitRepoUrl = "${props.repoUrl}"
    }
    
    stages{
        stage('cloning application repo'){
            steps{
                script{
                    pullGit(
                        branch: "$branch",
                        url: "$gitRepoUrl"
                        )
                    }
                }   
            }
            stage('Build'){
                steps{
                    script{
		       mvnBuild 'validate'
                       mvnBuild 'package'
                    }
                }
                
            }
            stage ('Test'){
                steps{
                    script{
	               mvnBuild 'test'
	               }
		}
            	post {
			always{
				junit "$applicationPath/TEST-*.xml"
			  }
		  }
            }
	    stage ('Push to Docker'){
	    	steps{
		 	script{
		 		dockerBuild.login()
				dockerBuild.build("${workspace}@script/resources", "$dockerRepo", "$applicationName:$BUILD_NUMBER")
				dockerBuild.push ("$dockerRepo", "$applicationName:$BUILD_NUMBER")
			}
		}
	    }
	    stage('Deploy'){
	    	steps{
			script{
			remoteSSH.ssh("$username", "$ipAdr", "$applicationName", "$dockerRepo", "$applicationPort" )
			}
		}
	  	post{
	  	     always{
			echo "Application is running succsfully in this url http://"$ipAdr":"$applicationPort" "
			}
		}	
	  }
     }
}
