@Library('pet-clinic') _
import org.foo.*

pipeline{
    agent any
    environment {
        def props = readJSON file: 'resources/pet-clinic.json'
        Tombranch = "${props.TomgitBranch}"
        PetBranch = "${props.PetgitBranch}"
        tomcatgitRepoUrl = "${props.TomrepoUrl}"
        petgitrepoUrl = "${props.PetrepoUrl}"
        applicationPath = "${props.commonUrl}"
        dockerPath = "${props.dockerFilePath}"
        dockerRepo = "${props.dockerRepoName}"
        TomcatapplicationName = "${props.TomapplicationName}"
        DockerapplicationName = "${props.applicationName}"
        Serverusername = "${props.serveruserName}"
        ipAdr = "${props.serveripAddress}"
        applicationPort = "${props.port}"
	    projectkey = "${props.sonarQubeProjectKey}"
	    TomcatDockerfileName = "${props.TomcatDockerfileName}"
	    DockerfileName = "${props.DockerFilename}"
	    
    }
    stages{
        stage('Checkout SCM'){
           steps{
               script{
                   if  (env.DeployTo == 'Tomcat'){
                   pullGit(
                        branch: "$Tombranch",
                        url: "$tomcatgitRepoUrl"
                    )
               }else {
                pullGit(
                           branch: "$PetBranch",
                           url: "$petgitrepoUrl"
                        )   
               }
           }
           }
           
        }
        stage ('SonarQube Test'){
            steps{
                script{
                 sonarQube.test("$projectkey")

                }
            }
        }
        stage('Build'){
            steps{
                script{
                    mvnBuild 'validate'
                    mvnBuild 'package'
                }
            }
        }
        stage('Test'){
            steps{
                script{
                    mvnBuild 'test'
                }
            }
        }
        stage('Junit Result'){
            steps{
                script{
                    junit "$applicationPath/TEST-*.xml"
                }
            }
        }
        stage('Push'){
            steps{
                script{
                    if (env.DeployTo == 'Tomcat'){
                        def tomcat = new dockerUtility(this)
                        tomcat.dockerLogin 'docker-hub'
                        tomcat.dockerBuild '${WORKSPACE}@script/$dockerPath/$TomcatDockerfileName', '$dockerRepo' , '$TomcatapplicationName:$BUILD_NUMBER'
                        tomcat.dockerPush '$dockerRepo' , '$applicationName:$BUILD_NUMBER'
                    }else if (env.DeployTo == 'Docker'){
                        def docker = new dockerUtility(this)
                        docker.dockerLogin 'docker-hub'
                        docker.dockerBuild '${WORKSPACE}@script/$dockerPath/$DockerfileName', '$dockerRepo' , '$DockerapplicationName:$BUILD_NUMBER'
                        docker.dockerPush '$dockerRepo' , '$DockerapplicationName:$BUILD_NUMBER'
                    }else {
                        def kub = new dockerUtility(this)
                        kub.dockerLogin 'docker-hub'
                        kub.dockerBuild '${WORKSPACE}@script/$dockerPath/$DockerfileName', '$dockerRepo' , '$DockerapplicationName:$BUILD_NUMBER'
                        kub.dockerPush  '$dockerRepo', '$DockerapplicationName:$BUILD_NUMBER' 
                    }
                }
            }
        }
    }
}
