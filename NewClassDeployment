@Library('pet-clinic') _   /*Shared Library  */
import org.foo.*;	   /* annoation */

pipeline{
    agent any
    environment{
        def props = readJSON file: 'resources/pet-clinic.json'
        branch = "${props.gitBranch}"
        gitRepoUrl = "${props.TomcatAppRepoUrl}"
        applicationPath = "${props.commonUrl}"
        dockerPath = "${props.dockerFilePath}"
        dockerRepo = "${props.dockerRepoName}"
        applicationName = "${props.applicationName}"
        Serverusername = "${props.serveruserName}"
        ipAdr = "${props.serveripAddress}"
        applicationPort = "${props.port}"
	projectkey = "${props.sonarQubeProjectKey}"

    }
    stages{
        stage('Chekout SCM'){
            steps{
                script{
                    pullGit(
                        branch: "$branch",
                        url: "$gitRepoUrl"
                    )
                }
            }
        }
	stage('SonarQube quality check'){
           steps{
	      script{
	      	  sonarQube.test("$projectkey")
		  }
	     }
	}
		  
	stage('Build'){
            steps{
                script{
                   mvnBuild 'validate'
                    mvnBuild 'package'

                }
            }
        }
        stage('Test'){
            steps{
                script{
                    mvnBuild 'test'
                }
            }
            post{
                always{
                    //junit "$applicationPath/TEST-*.xml"
		    echo "okay"
                }
            }
        }
        stage('Push'){
            when{
               environment name: 'DeployTo', value: 'Docker'
            }
            steps{
                script{
                    def execute = new dockerUtility(this)
                    execute.dockerLogin 'docker-hub'
                    execute.dockerBuild '${WORKSPACE}@script/$dockerPath/$petDockerfile', '$dockerRepo' , '$applicationName:$BUILD_NUMBER'
                    execute.dockerPush '$dockerRepo' , '$applicationName:$BUILD_NUMBER'
                }
            }
            when {
                environment name: 'DeployTo', value: 'Kuberentes'
            }
                script{
                   def execute = new dockerUtility(this)
                    execute.dockerLogin 'docker-hub'
                    execute.dockerBuild '${WORKSPACE}@script/$dockerPath/$petDockerFile', '$dockerRepo' , '$applicationName:$BUILD_NUMBER'
                    execute.dockerPush '$dockerRepo' , '$applicationName:$BUILD_NUMBER' 
                }
            when {
                environment name: 'DeployTo', value: 'Tomcat'
            }

                script{
                   def execute = new dockerUtility(this)
                    execute.dockerLogin 'docker-hub'
                    execute.dockerBuild '${WORKSPACE}@script/$dockerPath/$TomcatDockerfileName', '$dockerRepo' , '$applicationName:$BUILD_NUMBER'
                    execute.dockerPush '$dockerRepo' , '$applicationName:$BUILD_NUMBER' 
                }
            }

	stage('Deploying to Docker'){
	when{
		environment name: 'DeployTo', value: 'Docker'
		}

			script{
			otherRemote.dockerssh("$Serverusername", "$ipAdr", "$applicationName", "$dockerRepo", "$applicationPort" )
			}

		post {
	        always{
		     	sleep 10
			    echo " Application is running succsfully in this url http://$ipAdr:$applicationPort " 
		}
            } 
	}
        stage('Deploying to Kubernetes'){
	  when {
		    	environment name: 'DeployTo', value: 'Kubernetes'
		}
                script{
                    otherRemote.kubessh("$Serverusername", "$ipAdr", "$applicationName", "$dockerRepo", "$applicationPort" )
                }
            
		        post {
		always{
			sleep 10
			echo " Application is running succsfully in this url http://$ipAdr:30601"
			     }
            }
    	}
    	stage('Deploy to Tomcat'){
    	    when{
    	        environment name: 'DeployTo', value: 'Tomcat'
    	    }

    	        script{
    	            otherRemote.tomcatssh("$Serverusername", "$ipAdr", "$TomcatapplicationName", "$dockerRepo", "$TomcatapplicationPort" )
    	        }

    	    post{
    	        alwasy{
    	            echo "Application can be accesed in this url http://$Serverusername:$TomcatapplicationPort/$TomcatapplicationName/hello"
    	        }
    	    }
    	    }
    }
}
